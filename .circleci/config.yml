# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-linux:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/rust:1.65.0
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              sudo apt update
              sudo apt install libdbus-1-dev libncursesw5-dev libpulse-dev libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev pkg-config -y
      - run: 
          name: Build ncspot
          command: cargo build --release --target x86_64-unknown-linux-gnu
      - run:
          name: Package ncspot
          command: tar -czvf target/x86_64-unknown-linux-gnu/release/ncspot.tar.gz target/x86_64-unknown-linux-gnu/release/ncspot
      - store_artifacts:
          path: target/x86_64-unknown-linux-gnu/release/ncspot.tar.gz
          destination: ncspot.tar.gz
  build-debian:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/rust:1.65.0
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              sudo apt update
              sudo apt install libdbus-1-dev libncursesw5-dev libpulse-dev libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev pkg-config -y
              cargo install cargo-deb
      - run: 
          name: Build ncspot
          command: cargo deb -o target/debian/ncspot.deb
      - store_artifacts:
          path: target/debian/ncspot.deb
          destination: ncspot.deb
          
  build-windows:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/rust:1.65.0
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              sudo apt update
              sudo apt install libdbus-1-dev libncursesw5-dev libpulse-dev libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev pkg-config musl-tools mingw-w64 -y
      - run:
          name: Add Windows target
          command: rustup target add x86_64-pc-windows-gnu
      - run: 
          name: Build ncspot
          command: cargo build --release --target x86_64-pc-windows-gnu --no-default-features --features rodio_backend,pancurses_backend
      - store_artifacts:
          path: target/x86_64-pc-windows-gnu/release/ncspot.exe
          destination: ncspot.exe

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build:
    jobs:
      - build-linux
      - build-debian
      - build-windows
